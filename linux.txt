// install oh my zsh
sudo apt install zsh
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

ll -r >-> files files ordered by datte in ascending order

rm -rf /path/to/dir/* >-> delete content of dir

<command1> && <command2> >-> runs command2 only if command1 is successful

groups >-> see to which groups the logged user belongs

sudo adduser <username> <groupName> >-> add user <username> to group <groupName>

sudo !! >-> run previous command with sudo prepended

echo -e <content> >-> enable character escaping like '\n'
echo <content> >> <file> >-> appends content to file

stat <pathToFile> >-> get details about file/dir - also get permissions like `-rw-r--r--` as an integer as, e.g. 644
chmod <permission> -R <path> >-> recursively set permission to dir path and all subdirs and files
chroot >-> changes the root dir for the running process and all its child processes

apt-get install -y <packageName> >-> installs packageName without the additional confirmation prompt

apt-get autoremove >-> removes dangling transient dependency packages

>-> install package with dependecies
dpkg -i <packageName>
>-> fails due to missing dependencies
apt -f install >-> will install packaName dependencies
dpkg -i packageName

scp <pathToFile/Dir> <destinationIp/HostName>:<destinationPath> >-> copies file/dir from host to destinationIp/Host

mkdir -p <directory> >->
	- no errors if directories already exist 
	- creates directory including parent directories

mv <fileName> <dirName> >-> moves <fileName> to the <dirName>

grep '<text>' <sourceFilePath> > <targetFilePath> >-> filter lines from SourceFile and add them to the targetFile

curl $(< file) >-> execute curl command with arguments from file

git

git branch <newLocalBranchName> origin/<existingRemoteBranch> >-> checkout remote branch
git push -u origin <branchName> >-> avoid additional prompt when pushing new branch to remote

revert to older commit
git reset --hard <last_working_commit_id> >-> revert to an earlier commit locally
git push --force >-> apply changes to remote branch

git reset -- >-> unstage all files
git reset -- <path> >-> unstage file with path path

mvn

mvn dependency:tree >-> output
<some-dependency>:2.5:provided (version managed from 2.3; scope managed from compile)
	- the version some-dependency would have transitively been 2.3 
	- but that version 2.5 was specifically asked for in your project, so that is what was used.

<dependency> without <version>
its possible to define a <dependencyManagement> configfuration in the parent pom to define versions of dependencies
	- this has the result that we can omitt the <version> part of the dependency if it is defines using
		dependencyManagement

mvn help:dependency-tree >-> generates a tree-like representation of direct/transitive dependencies

mvn dependency:purge-local-repository >-> deletes jars from local maven repository
sbt
	dockerBaseImage       := "openjdk:jre-alpine"
	add enablePlugins(DockerPlugin) to build.sbt
	sbt docker:publishLocal

echo -e <content> >-> enable character escaping like '\n'
echo <content> >> <file> >-> appends content to file

stat <pathToFile> >-> get details about file/dir - also get permissions like `-rw-r--r--` as an integer as, e.g. 644
chmod <permission> -R <path> >-> recursively set permission to dir path and all subdirs and files 

apt-get install -y <packageName> >-> installs packageName without the additional confirmation prompt

scp <pathToFile/Dir> <destinationIp/HostName>:<destinationPath> >-> copies file/dir from host to destinationIp/Host

mkdir -p <directory> >->
	- no errors if directories already exist 
	- creates directory including parent directories

mv <fileName> <dirName> >-> moves <fileName> to the <dirName>

kill -9 <pid> >-> kill process with id pid

which <commandName> >-> prints the path to the command

grep '<text>' <sourceFilePath> > <targetFilePath> >-> filter lines from SourceFile and add them to the targetFile

grep -iRl <serchTerm> <dirParh>
	-i >-> case insensitive
	-R >-> recursively traverse content
	-l >-> list files instead of content

git

git branch <newLocalBranchName> origin/<existingRemoteBranch> >-> checkout remote branch
git push -u origin <branchName> >-> avoid additional prompt when pushing new branch to remote

git config >-> use two different configurations for work/play related repositories

	create ~/.gitconfig_work
	create ~/.gitconfig_play

	[includeIf "gitdir:~/workspace/"]
	  path = .gitconfig_work
	[includeIf "gitdir:~/playspace/"]
	  path = .gitconfig_play

git diff --stat <commit-hash> >-> compares current commit with commit-hash

mvn

mvn dependency:tree >-> output
<some-dependency>:2.5:provided (version managed from 2.3; scope managed from compile)
	- the version some-dependency would have transitively been 2.3 
	- but that version 2.5 was specifically asked for in your project, so that is what was used.

<dependency> without <version>
its possible to define a <dependencyManagement> configfuration in the parent pom to define versions of dependencies
	- this has the result that we can omitt the <version> part of the dependency if it is defines using
		dependencyManagement

mvn help:dependency-tree >-> generates a tree-like representation of direct/transitive dependencies

mvn -Dtest=SingleTest test >-> execute SingleTest
mvn -Dtest=TestClass#testOne+testTwo test >-> run multiple methods inside a class

 
exlcude tests based on annotation
	<plugin>
		<groupId>org.apache.maven.plugins</groupId>
		<artifactId>maven-surefire-plugin</artifactId>
		<configuration>
		    <excludedGroups>full.path.Annotation</excludedGroups>
		</configuration>
	</plugin>	

	@Category(Annotation.class)
	public void test() {}

maven-assembly-plugin
	assembly - is a group of files, directories, and dependencies that are assembled into an archive format and distributed
	allows to aggregate the project output along with its dependencies

maven-shade-plugin
	to shade a library is to take the contents files of said library, put them in your own jar, and change their package

maven unpack plugin >-> used to unpack the jar in a directory
maven unpack-dependencies >-> unpacka all jar dependencies

fat jar >-> a jar which contains classes from all dependencies and the classes of the project

sbt
	dockerBaseImage       := "openjdk:jre-alpine"
	add enablePlugins(DockerPlugin) to build.sbt
	sbt docker:publishLocal

//////////////////////////////

cat /etc/*-release >-> print 

-- add dns service
	changes to /etc/resolv.conf are ephermal
	
	-- install resolverconf
	sudo apt install resolveconf

>-> save session content to file
scirpt >-> starts a script session
script <outputFile> >-> saves session content to outputFile in current directory

nc netcat - is a utility that TODO

dns lookup
	cat /etc/resolv.conf >-> get list of all dns server which the machine uses
	dig +noall +answer <domain> >-> will display ip(s) assigned to domain
	dig +noall +answer -x <ip> >-> will display domain name assigned to ip

iptables - firewall utility
	- accept -> allow connection
	- drop -> drop connection without an error
	- reject -> drop connection with error

	iptables -L --line-numbers >-> list all iptables rules with line number
	iptables -A OUTPUT -d <ip> -j DROP >-> drop all outgoing connectionss to ip
	iptables -D <chain> <lineNumber> >-> delete rule for chain with lineNumber

tcpdump

tcpdump -i any udp port <portNumber> >-> listen on port <portNumber> on any interface
tcpdump -i eth0 udp port <portNumber> -w <fileName>.pcap >-> listen on interface eth0 on port <portNumber> and write to file

scp

scp <username>@<remoteIp>:<pathToFileToBeDownloaded> <targetLocalPath> >-> downloads file from remoteIp to local machine using ssh

mvn -U clean dependency:tree -Ddetail=true

lsof -i >-> listing of all internet and networking files
lsof -i :<portNumber> >-> see whats running on port portNumber

tmux
	^b + c >-> create new window
	^b + , >-> name window
	^b + w >-> list all windows
	^b + & >-> kill window


vim
    - cut/paste a line/block of text
    v >-> enter visual mode
    select text block
    d >-> cut the block
    p >-> paste the block


<command1> && <command2> >-> runs command2 only if command1 is successful

groups >-> see to which groups the logged user belongs

sudo adduser <username> <groupName> >-> add user <username> to group <groupName>

sudo !! >-> run previous command with sudo prepended

unzip <file>.zip -d <destination> >-> unzips dile file to destination

namespaces
	1. mount - isolates filesystem mount points
	2. uts - isolates hostname and domainname
	3. ipc - isolate interpocess communication (IPC) resources
	4. pid - isolate the PID number space
	5. network - isoalte network interface
	6. user - isolate uid/guid number spaces
	7. cgroup - isolate cgroup root directory

namespaces provide - a way to limit what a process can see, to make it appear as though it’s the only process running on a host.
Note that namespaces do not restrict access to physical resources such as CPU, memory and disk. That access is metered and restricted by a kernel feature called ‘cgroups’.
